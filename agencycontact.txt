import os
import json
import time
import requests
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import text
from df_database_models.db_conn import get_rds_db_session, get_as400_db_session
from df_database_models.models import AgencyContact, Source_System
from df_database_models.db_utils import  generate_uuid, convert_timestamps, generate_uuid, query_update_dict, get_record, call_sp
from secrets_manager import get_secret
from datetime import datetime
import pandas as pd
import asyncio
from adf_pyutils.clm_wrapper import common_logger

print("Class job is executing")

## Fetch SQS producer Parameters from aws secret manager

def init_sp(source_transaction_id=None):
    if source_transaction_id:
        sqs_producer_secret = json.loads(get_secret(
                secret_name=os.environ["SQS_PRODUCER_SECRET_ID"], region_name=os.environ["AWS_REGION"]))
        sqs_producer_access_key = sqs_producer_secret["access_key"]
        sqs_policy_update_url = os.environ["SQS_POLICY_UPDATE_URL"]
        call_sp(sqs_policy_update_url,sqs_producer_access_key, source_transaction_id)

async def log_msg(func,**kwargs):
    await asyncio.to_thread(func,**kwargs)

def call_session_engine(source_system=None, database_name=None):

    if source_system:
        rds_secret_name=os.environ["RDS_SECRETS_MANAGER_ID"]
        region_name=os.environ["AWS_REGION"]
        rds_host_nm=os.environ['RDS_HOST']

        if database_name == 'ref_data':
            rds_db_nm=os.environ['RDS_REF_DB_NAME']
        elif database_name == 'mdm_raw':
            rds_db_nm=os.environ['RDS_RAW_DB_NAME']
        elif database_name == 'mdm_refined':
            rds_db_nm=os.environ['RDS_REFINED_DB_NAME']
        else:
            rds_db_nm=os.environ['RDS_DB_NAME']
            

        if source_system.lower() == 'as400_aff':
            #Calling the as400 engine to establish a connection to PAS Source System - as400_AFF
            as400_secret_name=os.environ["AS400_AFF_SECRETS_MANAGER_ID"]
            as400_engine=get_as400_db_session(as400_secret_name, region_name)

        elif source_system.lower() == 'as400_kkins':
            #Calling the as400 engine to establish a connection to PAS Source System - as400_AUM
            as400_secret_name=os.environ["AS400_KKINS_SECRETS_MANAGER_ID"]
            as400_engine=get_as400_db_session(as400_secret_name, region_name)

        #Calling the Db session Object to establish a connection to Data Foundation Schema
        session=get_rds_db_session(rds_secret_name,region_name,rds_host_nm,rds_db_nm)

        return session, as400_engine

# lookup into as400 aff
def lookup_as400(config=None, id=None):

    source_system = config['source_system']
    if source_system:
        if(source_system.lower() == 'as400_affprd'):
                df = pd.read_sql(f"""
                        SELECT CAST(NULL AS varchar(255)) AS df_agency_contact_id
                        ,CAST(NULL AS varchar(255)) AS raw_agency_contact_id
                        --,trim(trim(SUBPNO) || '_' || trim(SUBSB#) || '_' || trim(SUPHN#)|| '_' || trim(SUSEQN)|| '_' || trim(SUEFDT)|| '_' || trim(SURGSD)) AS source_agency_contact_id
                        ,CAST(NULL AS varchar(255)) AS df_agency_id
                        ,trim(SUBPNO) AS source_agency_id
                        ,trim(SUBFNM) AS first_name
                        ,trim(SUBMNM) AS middle_name
                        ,trim(SUBLNM) AS last_name
                        ,(trim(SUBLNM) || ', ' || trim(SUBFNM) || ' ' || trim(SUBMNM)) as full_name
                        ,CAST(NULL AS varchar(255)) AS source_contact_type
                        ,CASE 
                            WHEN lower(trim(SUACTI)) = 'n'
                                THEN 'Terminated'
                            WHEN lower(trim(SUACTI)) = 'y'
                                THEN 'Active'
                            ELSE NULL
                            END AS agency_contact_status
                        ,trim(SUEMAL) AS email
                        ,CAST(NULL AS varchar(255)) AS ssn
                        ,CAST(NULL AS varchar(255)) AS passport_number
                        ,trim(SUTXID) AS tax_number
                        ,trim(SUBAD1) AS premises_street_line1
                        ,trim(SUBAD2) AS premises_street_line2
                        ,trim(SUBCTY) AS premises_city
                        ,CAST(NULL AS varchar(255)) AS premises_county
                        ,trim(SUBSTC) AS premises_state
                        ,CAST(NULL AS varchar(255)) AS premises_country
                        ,trim(SUBZIP) AS premises_zip_code
                        ,CAST(NULL AS varchar(255)) AS premises_latitude
                        ,CAST(NULL AS varchar(255)) AS premises_logitude
                        ,trim(SUBAD1) AS mailing_address_line1
                        ,trim(SUBAD2) AS mailing_address_line2
                        ,trim(SUBCTY) AS mail_city
                        ,CAST(NULL AS varchar(255)) AS mail_county
                        ,trim(SUBSTC) AS mail_state
                        ,CAST(NULL AS varchar(255)) AS mailing_country
                        ,trim(SUBZIP) AS mailing_zip
                        ,CAST(NULL AS varchar(255)) AS mailing_latitude
                        ,CAST(NULL AS varchar(255)) AS mailing_longitude
                        ,trim(SUBAD1) AS billing_address_line1
                        ,trim(SUBAD2) AS billing_address_line2
                        ,trim(SUBCTY) AS billing_city
                        ,CAST(NULL AS varchar(255)) AS billing_county
                        ,trim(SUBSTC) AS billing_state
                        ,CAST(NULL AS varchar(255)) AS billing_country
                        ,trim(SUBZIP) AS billing_zip
                        ,CAST(NULL AS varchar(255)) AS billing_latitude
                        ,CAST(NULL AS varchar(255)) AS billing_longitude
                        ,trim(SUPHN#) AS home_phone
                        ,trim(SUPHN#) AS work_phone
                        ,trim(SUPHN#) AS mobile_phone
                        --,trim(SUFAX#) AS invoice_fax
                        ,trim(SUFAX#) AS fax --premises_fax
                        --,trim(SUFAX#) AS mail_fax
                        ,trim(SUWEBA) AS website
                        ,CAST(NULL AS varchar(255)) AS mdm_agency_contact_id
                        ,CAST(NULL AS varchar(255)) AS created_date
                        ,CAST(NULL AS varchar(255)) AS modified_date
                        ,'AS400_AFFPRD' AS source_system
                        ,CAST(NULL AS varchar(255)) AS source_system_id
                        ,CAST(NULL AS varchar(255)) AS mdm_agency_contact_id
                    FROM adgdtapr.adgsubp
                    WHERE SUBPNO =  {id}
                    """, con=as400_engine)
        elif(source_system.lower() == 'as400_attorney'):
                    df = pd.read_sql(f"""
                                    SELECT CAST(NULL AS varchar(255)) AS df_agency_contact_id
                                    ,CAST(NULL AS varchar(255)) AS raw_agency_contact_id
                                    ,AAGNCODE AS source_agency_id
                                    ,AEMAILAD AS email
                                    ,AEMAILAD AS email_operational
                                    ,AADDRES1 AS premises_address_line_1
                                    ,AADDRES2 AS premises_address_line_2
                                    ,ACITY AS premises_city
                                    --,CAST(NULL AS varchar(255)) AS premises_county
                                    ,ASTATE AS premises_state
                                    --,CAST(NULL AS varchar(255)) AS premises_country
                                    ,AZIPCODE AS premises_zip
                                    ,APHONENU AS premises_phone
                                    ,AADDRES1 AS mailing_address_line_1
                                    ,AADDRES2 AS mailing_address_line_2
                                    ,ACITY AS mailing_city
                                    --,CAST(NULL AS varchar(255)) AS mailing_county
                                    ,ASTATE AS mailing_state
                                    --,CAST(NULL AS varchar(255)) AS mailing_country
                                    ,AZIPCODE AS mailing_zip
                                    ,APHONENU AS mailing_phone
                                    ,AADDRES1 AS billing_address_line_1
                                    ,AADDRES2 AS billing_address_line_2
                                    ,ACITY AS billing_city
                                    --,CAST(NULL AS varchar(255)) AS billing_county
                                    ,ASTATE AS billing_state
                                    --,CAST(NULL AS varchar(255)) AS billing_country
                                    ,AZIPCODE AS billing_zip
                                    ,APHONENU AS billing_phone
                                    ,'AS400_Attorney' AS source_system
                                    FROM LAWDTAPR.LAWAGNCP
                                    WHERE AAGNCODE = {id}
                                     """, con=as400_engine)
        elif(source_system.lower() == 'as400_kkins'):
                df = pd.read_sql(f"""
                        SELECT DISTINCT CAST(NULL AS varchar(36)) AS df_agency_id,
                        (agnt.AGT_OFF_CODE || '-' || agnt.AGY_AGENT_NBR || '-' || agnt.AGY_AGENT_CODE) AS source_agency_contact_id,
                        CAST(NULL AS varchar(36)) AS source_agency_id,
                        CAST(NULL AS varchar(36)) AS df_source_system_id,
                        CAST(NULL AS varchar(36)) AS mdm_agency_id,
                        CAST(NULL AS timestamp) AS created_date,
                        CAST(NULL AS timestamp) AS modified_date
                        FROM PLCYPROD.APZ001 AS agcy
                        INNER JOIN PLCYPROD.APZ002 AS agnt ON agcy.AGY_OFFICE = agnt.AGT_OFF_CODE AND agcy.AGY_NUMBER = agnt.AGY_AGENT_NBR
                        INNER JOIN PLCYPROD.APZ001TG AS gt ON agcy.AGY_OFFICE = gt.AGY_OFFICE AND agcy.AGY_NUMBER = gt.AGY_NUMBER
                        INNER JOIN PLCYPROD.AUZ003B AS pl ON agnt.AGY_AGENT_NBR = pl.AGY_AGENT_NBR AND agnt.AGY_AGENT_CODE = pl.AGY_AGENT_CODE
                    """, con=as400_engine)
    else:
        df=None

    if(len(df)>0):
        return df.to_dict('records')[0]
    else:
        return None

async def consume_lambda(config=None):
    asyncio.create_task(log_msg(common_logger,log_messages='consume lambda function invoking'))
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)
    asyncio.create_task(log_msg(common_logger,log_messages=f'Processing to DB @ {now} | {datetime.timestamp(now)}'))

    try:
        asyncio.create_task(log_msg(common_logger,log_messages='Config',api_response=convert_timestamps(config)))
        config_dicts = config if type(config) is dict else json.loads(str(config))
        if type(config_dicts) == list:
            pass
        else:
            config_dicts = [config_dicts]
        for config_dict in config_dicts:
            id = config_dict['source_agency_contact_id']
            source_system = config_dict['source_system'].lower()
            if(id):
                print("Calling call_session_engine Function ")
                global session, as400_engine
                session, as400_engine = call_session_engine(source_system=source_system)

                as400_agency_contact_summary_dict = lookup_as400(config_dict, id)
                if(as400_agency_contact_summary_dict):
                    asyncio.create_task(log_msg(common_logger,log_messages=f'Initial {source_system} Agency Contact Summary dict:',api_response=convert_timestamps(as400_agency_contact_summary_dict)))

                    ## Fetch Source SyStem Id from Data Foundation
                    source_system = as400_agency_contact_summary_dict.get("source_system")
                    source_system_record = (query.first() if (query := get_record(session,model=Source_System,column_name='source_system',value=source_system)) is not None else None)
                    if source_system_record:
                        as400_agency_contact_summary_dict['df_source_system_id'] = source_system_record.df_source_system_id

                    source_agency_contact_id = as400_agency_contact_summary_dict.get("source_agency_contact_id") # Changed
                    df_source_system_id = as400_agency_contact_summary_dict.get("df_source_system_id")
                
                    agency_contact_record = get_record(session,model=AgencyContact,column_name='source_agency_id',value=source_agency_contact_id,df_source_system_id=df_source_system_id)
            
                    self_agency_contact = (agency_contact_record.first() if agency_contact_record is not None else None)

                    asyncio.create_task(log_msg(common_logger,log_messages=f'self agency - {self_agency_contact}'))
                    asyncio.create_task(log_msg(common_logger,log_messages=f'Changed {source_system} Agency Contact Summary dict:',api_response=convert_timestamps(as400_agency_contact_summary_dict)))
                    if(self_agency_contact is None):
                        asyncio.create_task(log_msg(common_logger,log_messages='no agency contact was found in Data Foundation'))
                        as400_agency_contact_summary_dict['df_agency_contact_id'] = generate_uuid(
                            str(as400_agency_contact_summary_dict['source_agency_contact_id'] or '') + 
                            str(as400_agency_contact_summary_dict['retail_broker'] or ''), 
                            df_source_system_id
                        )
   
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Insert {source_system} Agency Summary dict: ',api_response=convert_timestamps(as400_agency_contact_summary_dict)))
                        session.add(AgencyContact.from_dict(cls=AgencyContact, d=as400_agency_contact_summary_dict))
                        session.commit()
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Inserted to DB @ {now} | {datetime.timestamp(now)}'))
                    elif(self_agency_contact is not None):
                        asyncio.create_task(log_msg(common_logger,log_messages='agency exists in Data foundation schema'))
                        as400_agency_contact_summary_dict['df_agency_contact_id'] = self_agency_contact.df_agency_contact_id
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Updated {source_system} Agency Version Summary dict:',api_response=convert_timestamps(as400_agency_contact_summary_dict)))
                        agency_contact_record.update(query_update_dict(obj=AgencyContact, dict=as400_agency_contact_summary_dict))
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Updated in DB @ {now} | {datetime.timestamp(now)}'))
                        session.commit()
            else:
                    error_log = {
                        "source_agency_contact_id" : id,
                        "error_message" : "No record found after lookup" 
                    }
                    #session.add(broker_portal_error_log.from_dict(error_log))
                    #session.commit()
                    asyncio.create_task(log_msg(common_logger,log_messages='No record found after lookup'))
        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        asyncio.create_task(log_msg(common_logger,log_messages=f'execution_time: {end_timestamp} - {start_timestamp}'))
    except SQLAlchemyError as e:
        asyncio.create_task(log_msg(common_logger,log_messages='Error',api_response=e))
        session.rollback()
        raise e


def handle(event, context):
    start_time = time.time()
    
    print("Handle function is called")
    for record in event['Records']:
        payload = record["body"]
        asyncio.run(consume_lambda(config=payload))

    end_time = time.time()

    return {
        "execution_time_sec": end_time - start_time 
    }


if __name__ == '__main__':
    handle({'Records': [{'body': '{"source_agency_contact_id":"1003093977"}'}]}, None)
    # handle({'Records': [{'body': '[{ "source_agency_id": "2002569486", "parent_agency_id": "2002254485", "agency_type": "renewal"}]'}]}, None)
    # handle({'Records': [{'body': '[{"source_agency_id":"2002573640"},{"source_agency_id":"2002573647"},{"source_agency_id":"2002573649"}]'}]}, None)
